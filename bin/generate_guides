#!/usr/bin/env coffee
fs     = require('fs')
glob   = require('glob')
path   = require('path')
yaml   = require('js-yaml')


Autolink = require('./support/autolink').Autolink
TemplateWriter = require('./support/template_writer').TemplateWriter
MarkdownParser = require('./support/markdown_parser').MarkdownParser


class GuideGenerator
  constructor: ({dirname}) ->
    @files = glob.sync(dirname)
    @parser = new MarkdownParser
    @groups = []
    @ungrouped = []

  _groupForPath: (filepath) ->
    groupName = filepath.match(/_guides\/\d+_(.*)\//)?[1]
    return unless groupName?
    group = @groups.filter((g) -> g.name is groupName)[0]
    if !group?
      group = {name: groupName, guides: []}
      @groups.push(group)
    group

  generateGuide: (filepath) ->
    content = fs.readFileSync(filepath).toString()
    content = Autolink.insertLinks(content, @)
    tokens = @parser.stringToTokens(content)
    filename = path.basename(filepath).split(".")[0].replace(/^\d*_/, '')

    replacements = {}

    # it's getting rendered by Jekyll, so remove it
    titleToken = tokens.shift()
    if titleToken.type isnt 'heading' or titleToken.depth isnt 1
      throw "#{filepath} must begin with a h1 (`# `) for its title!"
    else
      replacements.title = titleToken.text

    for token, idx in tokens
      if token.type is 'heading'
        html = @parser.tokensToHTML([token])

        headingText = html.match(/>(.*)<\/h/)[1] # it gets html-encoded, so token.text won't work later
        # parser gives the header an ID, just use that:
        id = html.match(/id="(.*)"/)[1]
        html = html
          .replace(headingText, "<a href='##{id}'>#{headingText}</a>")
          .replace(/id=/, ' class="guide-heading" id=')
        wrapper = {
          type: "paragraph"
          text: html
        }
        tokens[idx] = wrapper

    replacements.guide_html = @parser.tokensToHTML(tokens)
    group = @_groupForPath(filepath)
    tocEntry = {title: replacements.title, filename}
    if !group?
      @ungrouped.push(tocEntry)
    else
      group.guides.push(tocEntry)
    @writer.write("docs/#{filename}.html", replacements)


  render: ->
    @writer = new TemplateWriter("guide.html")
    for f in @files
      @generateGuide(f)
    @_renderDataFile()

  # autolink everything!!!
  hasId: -> true
  hasMethod: -> true

  _extractTitle: (tokens) ->
    titleToken = tokens[0]
    if titleToken.type isnt 'heading' or titleToken.depth isnt 1
      return false
    else
      return titleToken.text

  _renderDataFile: ->
    writer = new TemplateWriter("guides.yml")
    writer.write("_data/guide_groups.yml", {guides: yaml.dump(@groups)})
    writer.write("_data/guide_ungrouped.yml", {guides: yaml.dump(@ungrouped)})

generator = new GuideGenerator
  dirname: "#{__dirname}../../_guides/**/*.md"
generator.render()
