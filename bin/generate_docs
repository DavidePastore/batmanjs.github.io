#!/usr/bin/env coffee

_      = require('underscore')
fs     = require('fs')
glob   = require('glob')
hljs   = require('highlight.js')
yaml   = require('js-yaml')
marked = require('marked')

argv   = require('optimist')
           .usage('Usage: $0 -dir [docs directory]')
           .demand('dir')
           .argv

parseTokens = (tokens, options) ->
  tokens.links = {}
  options = _.extend({}, marked.defaults, options)
  marked.Parser.parse(tokens, options)

generateId = (title) -> encodeURIComponent(title.replace(/\s/g, '_').toLowerCase())

parseHeading = (title) ->
  if title.match(/^@/)
    level = "class"
    title = title.match(/^@(.*)/)[1]
  else if title.match(/^::/)
    level = "prototype"
    title = title.match(/^::(.*)/)[1]
  else return { title }

  type = 'property' if title[0] is '.'
  type = 'accessor' if title[0] is '%'
  title = title.substr(1) if type
  type ||= 'function'

  res = title.match(/(.+?)([[( :].*)/)
  if res
    [match, title, meta] = res
    [match, params, returnType] = meta.match(/(?:\((.*)\))?\s*:?\s*(.*)/)
    unless params?
      [match, params, returnType] = meta.match(/(\[.*\])?\s*:?\s*(.*)/)

    returnType = undefined unless returnType

  {title, meta: {type, level, params, returnType}}

writeTemplate = (template, destination, replacements) ->
  content = fs.readFileSync("#{__dirname}/../_templates/#{template}").toString()
  for key, replacement of replacements
    content = content.replace("#= #{key}", replacement)

  console.log("generating #{destination}")
  fs.writeFileSync("#{__dirname}/../#{destination}", content)

files = glob.sync("#{__dirname}/../docs/api/*.html")
for file in files
  fs.unlinkSync(file)

sections = []
files    = glob.sync("#{argv.dir}/**/*.litcoffee")
options  = highlight: (code, lang) -> hljs.highlight('coffeescript', code).value

files.forEach (f) ->
  content = fs.readFileSync(f)
  tokens  = marked.lexer(content.toString())

  tokens.forEach (token) ->
    if token.type == 'heading' && token.depth == 1
      sections.push(title: token.text, sub: [], tokens: [])

    else if token.type == 'heading' && token.depth == 2
      section = _.last(sections)
      section.sub.push(title: token.text, tokens: [])

    else
      section = _.last(sections)
      sub     = _.last(section.sub)

      if sub?
        sub.tokens.push(token)
      else
        section.tokens.push(token)

sections.forEach (section, index) ->
  # manually handle the index page
  section.id = if index == 0
    "index"
  else
    generateId(section.title)
  section.html = parseTokens(section.tokens, options)

  usedIds = {}

  section.sub.forEach (sub, subIndex) ->
    {title, meta} = parseHeading(sub.title)

    if meta
      id = generateId("#{meta.level}_#{meta.type}_#{title}")
      sub.meta = meta
    else
      id = generateId(title)

    sub.id = id
    offset = 0
    while usedIds[sub.id]
      offset++
      sub.id = "#{id}_#{offset}"

    usedIds[sub.id] = true

    sub.title = title
    sub.html = parseTokens(sub.tokens, options)

  writeTemplate('api.html', "docs/api/#{section.id}.html", api_doc: yaml.dump(section))

index = sections.map (section) ->
  subIndex = section.sub.map (sub) -> id: sub.id, title: sub.title
  id: section.id, title: section.title, sub: subIndex

writeTemplate('config.yml', '_config.yml', api_index: yaml.dump(api_index: index))
