#!/usr/bin/env coffee

_      = require('underscore')
fs     = require('fs')
glob   = require('glob')
hljs   = require('highlight.js')
yaml   = require('js-yaml')
marked = require('marked')

argv   = require('optimist')
           .usage('Usage: $0 -dir [docs directory]')
           .demand('dir')
           .argv

class Autolink
  @CLASS_REGEXP: ///                   # "test" : http://rubular.com/r/aCUg3nq6fC
              (?!\[)                        # not already a link (preceded by "[")
              (`                            # Wrapped in `
                Batman                      # starts with Batman
                (?:\.[A-Z][A-Za-z]+)+       # Has one or more CamelCased words which are joined by .
              `)
              (?![\s\w]*\]\()               # not already a link (followed by " some topic](")
            ///g                            # all of them

  @BINDING_REGEXP: ///
              (?!\[)                        # not already a link (preceded by "[")
              (`                            # Wrapped in `
                data                        # starts with data
                -[a-z]+                     # has a binding name
                (?:\-[^`\s=]+)?             # might have a binding argument (`data-addclass-error` or `data-bind-\#{attr}`)
              `)
              (?![\s\w]*\]\()               # not already a link (followed by " some topic](")
            ///g

  @_BINDING_SPECIAL_CASES: {
    "data-renderif"   : "data-renderif / data-deferif"
    "data-deferif"    : "data-renderif / data-deferif"
    "data-showif"     : "data-showif / data-hideif"
    "data-hideif"     : "data-showif / data-hideif"
    "data-addclass"    : "data-addclass / data-removeclass"
    "data-removeclass" : "data-addclass / data-removeclass"
  }

  @insertLinks: (text="", generator) ->
    newText = text.replace @CLASS_REGEXP, (match, className, offset, string) =>
      pageId = DocSection::generateId(className.replace(/`/g, ''))
      if generator.hasId(pageId)
        @_generateAPILink(className, "#{pageId}.html")
      else
        @_registerUndocumented(className)

    newText = newText.replace @BINDING_REGEXP, (match, bindingName, offset, string) =>
      bindingParts = bindingName.replace(/`/g, '').split("-")
      cleanBindingName = "#{bindingParts[0]}-#{bindingParts[1]}"
      if generator.hasMethod("batman.view_bindings", cleanBindingName)
        @_generateAPILink(bindingName, "batman.view_bindings.html##{cleanBindingName}")
      else if specialCase = @_BINDING_SPECIAL_CASES[cleanBindingName]?
        @_generateAPILink(bindingName, "batman.view_bindings.html##{specialCase}")

      else
        @_registerUndocumented(bindingName)
    newText

  @_generateAPILink: (str, page) ->
        link = "[#{str}](/docs/api/#{page})"

  @_registerUndocumented: (name) ->
      if !@_undocumented[name]
        @_undocumented[name] = true
        console.warn "-----> No API Documentation for #{name}"
      name

  @_undocumented: {}

class DocGenerator
  constructor: ->
    @tokens = []
    @_allIds = []
    @_allMethods = {}

  registerId: (id) ->
    throw "Already defined #{id}" if @hasId(id)
    @_allIds.push(id)

  hasId: (id) ->
    id in @_allIds

  registerMethod: (pageId, methodName, meta) ->
    builtMethodName = meta?.rawTitle || methodName
    throw "#{pageId}#{builtMethodName} was defined twice!" if @hasMethod(pageId, builtMethodName)
    page = @_allMethods[pageId] ?= {}
    page[builtMethodName] = meta.id

  hasMethod: (pageId, methodName) ->
    @_allMethods[pageId]?[methodName]?

  addContent: (contentString) ->
    @tokens = @tokens.concat(marked.lexer(contentString))

  render: ->
    sections = []
    @tokens.forEach (token) =>
      if token.type == 'heading' && token.depth == 1
        sections.push(new DocSection(title: token.text, sub: [], tokens: [], index: sections.length, generator: @))

      else if token.type == 'heading' && token.depth == 2
        section = _.last(sections)
        section.sub.push(new DocSection(title: token.text, tokens: [], parent: section, index: section.sub.length, generator: @))

      else
        section = _.last(sections)
        sub     = _.last(section.sub)

        if sub?
          sub.tokens.push(token)
        else
          section.tokens.push(token)

    sections.forEach (section, index) -> section.render()

    index = sections.map (section) ->
      subIndex = section.sub.map (sub) -> id: sub.id, title: sub.title
      id: section.id, title: section.title, sub: subIndex, meta: section.meta

    groupings = {}
    for entry in index
      groupingName = entry.meta?.grouping ? "Ungrouped"
      parentName = entry.meta?.parent
      if parentName
        parentEntry = _.findWhere(groupings[groupingName], {title: parentName})
        parentEntry.children ?= []
        parentEntry.children.push(entry)
      else
        groupings[groupingName] ?= []
        groupings[groupingName].push(entry)

    @writeTemplate('config.yml', '_config.yml', api_index: yaml.dump(api_index: groupings))

  writeTemplate: (template, destination, replacements) ->
    content = fs.readFileSync("#{__dirname}/../_templates/#{template}").toString()
    for key, replacement of replacements
      content = content.replace("#= #{key}", replacement)

    console.log("generating #{destination}")
    fs.writeFileSync("#{__dirname}/../#{destination}", content)

class DocSection
  constructor: ({@title, @tokens, @sub, @parent, @index, @generator}) ->
    @options =
      highlight: (code, lang) -> hljs.highlight('coffeescript', code).value
      tables: true

    if @_isMethod()
      {@title, @meta} = HeadingParser.parse(@title)
      @id = if @meta
        @meta.id = @generateId("#{@meta.level}_#{@meta.type}_#{@title}")
      else
        @generateId(@title)
      # this has some "false positives" -- any <h2> is a "method" (which includes bindings and filters)
      registryInfo = @meta || {id: @id}
      @generator.registerMethod(@parent.id, @title, registryInfo)
    else # if @_isClass()
      # vv Has to be after so that _isClass can use the raw title
      {@title, @meta} = HeadingParser.parse(@title)
      @id = if @index == 0
        "index" # manually handle the index page
      else
        @generateId(@title)
      @generator.registerId(@id) # to make sure we're linking real pages

  _isMethod: -> !@sub?
  _isClass: -> @title.substr(0, 5) is '/api/'

  parseSubs: ->
    @sub?.forEach (sub, subIndex) =>
      sub.html = @_parseTokens(sub.tokens, @options)

  toObject: ->
    obj = {@title}
    obj.meta = @_metaToObject(@meta) if @meta?
    obj.sub = (s.toObject() for s in @sub) if @sub?.length?
    obj.tokens = @tokens
    obj.id = @id if @id?
    obj.html = @html
    obj

  _metaToObject: (metaObject) ->
    obj = {}
    for own key, value of metaObject
      if !(key in ["rawTitle", "id"])
        obj[key] = value
    obj

  render: ->
    @html = @_parseTokens(@tokens, @options)
    @parseSubs()
    @generator.writeTemplate('api.html', "docs/api/#{@id}.html", api_doc: yaml.dump(@toObject()))

  generateId: (title) -> encodeURIComponent(title.replace(/\s/g, '_').toLowerCase())

  _parseTokens: (tokens, options) ->
    tokens.forEach (t) =>
      if t.type is 'table'
        for row in t.cells
          for cell, idx in row
            row[idx] = Autolink.insertLinks(cell, @generator)
      else if t.type in ["paragraph", "listitem", "tablecell"]
        t.text = Autolink.insertLinks(t.text, @generator)

    tokens.links = {}
    options = _.extend({}, marked.defaults, options)
    marked.Parser.parse(tokens, options)

class HeadingParser
  @parse: (title) ->
    # Expects `/api/Data Structures/Batman.Set/SetIndex`
    # or `::%length : Number` etc
    if title.match(/\/api\//)
      @_parseFileHeading(title)
    else
      @_parseSectionHeading(title)

  @_parseFileHeading: (title) ->
    titleSegments = title.split("/")
    fileTitle = titleSegments.pop()
    titleSegments.splice(0,2) # trash '', 'api'
    meta = {grouping: titleSegments[0], parent: titleSegments[1]}
    {title: fileTitle, meta}

  @_parseSectionHeading: (title) ->
    rawTitle = title
    if title.match(/^@/)
      level = "class"
      title = title.match(/^@(.*)/)[1]
    else if title.match(/^::/)
      level = "prototype"
      title = title.match(/^::(.*)/)[1]
    else return { title }

    type = 'property' if title[0] is '.'
    type = 'accessor' if title[0] is '%'
    title = title.substr(1) if type
    type ||= 'function'

    res = title.match(/(.+?)([[( :].*)/)
    if res
      [match, title, meta] = res
      [match, params, returnType] = meta.match(/(?:\((.*)\))?\s*:?\s*(.*)/)
      unless params?
        [match, params, returnType] = meta.match(/(\[.*\])?\s*:?\s*(.*)/)

      returnType = undefined unless returnType

    {title, meta: {type, level, params, returnType, rawTitle}}


files = glob.sync("#{argv.dir}/**/*.litcoffee")

docGenerator = new DocGenerator
for f in files
  fileContent = fs.readFileSync(f).toString()
  docGenerator.addContent(fileContent)

docGenerator.render()
