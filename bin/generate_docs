#!/usr/bin/env coffee

_      = require('underscore')
fs     = require('fs')
glob   = require('glob')
hljs   = require('highlight.js')
yaml   = require('js-yaml')
marked = require('marked')

argv   = require('optimist')
           .usage('Usage: $0 -dir [docs directory]')
           .demand('dir')
           .argv

parseTokens = (tokens, options) ->
  tokens.links = {}
  options = _.extend({}, marked.defaults, options)
  marked.Parser.parse(tokens, options)

generateId = (title, index) ->
  title = encodeURIComponent(title.replace(/\s/g, '_'))
  "#{index}_#{title}"

writeTemplate = (template, destination, replacements) ->
  content = fs.readFileSync("#{__dirname}/../_templates/#{template}").toString()
  for key, replacement of replacements
    content = content.replace("#= #{key}", replacement)

  fs.writeFileSync("#{__dirname}/../#{destination}", content)

files = glob.sync("#{__dirname}/../docs/api/*.html")
for file in files
  fs.unlinkSync(file)

sections = []
files    = glob.sync("#{argv.dir}/**/*.litcoffee")
options  = highlight: (code, lang) -> hljs.highlightAuto(code).value

files.forEach (f) ->
  content = fs.readFileSync(f)
  tokens  = marked.lexer(content.toString())

  tokens.forEach (token) ->
    if token.type == 'heading' && token.depth == 1
      sections.push(title: token.text, sub: [], tokens: [])

    else if token.type == 'heading' && token.depth == 2
      section = _.last(sections)
      section.sub.push(title: token.text, tokens: [])

    else
      section = _.last(sections)
      sub     = _.last(section.sub)

      if sub?
        sub.tokens.push(token)
      else
        section.tokens.push(token)

sections.forEach (section, index) ->
  section.id = generateId(section.title, index)
  section.html = parseTokens(section.tokens, options)

  section.sub.forEach (sub, subIndex) ->
    sub.id = "#{index}_#{generateId(sub.title, subIndex)}"
    sub.html = parseTokens(sub.tokens, options)

  writeTemplate('api.html', "docs/api/#{section.id}.html", api_doc: yaml.dump(section))

index = sections.map (section) ->
  subIndex = section.sub.map (sub) -> id: sub.id, title: sub.title
  id: section.id, title: section.title, sub: subIndex

writeTemplate('config.yml', '_config.yml', api_index: yaml.dump(api_index: index))
